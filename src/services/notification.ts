import PushNotification, {
	PushNotificationScheduleObject, RepeatType,
} from 'react-native-push-notification';
import { PushNotificationIOS } from 'react-native';
import { Tasky } from '../core/modules';
import firebase, { RNFirebase } from 'react-native-firebase';
import AsyncStorage from '@react-native-community/async-storage';

const CHANNEL_ID = "TASKYCHEN-14-8//2019"
export function setupPushNotification() {
    const channel = new firebase.notifications.Android.Channel(
		'reminder',
		'Tasky Notification Channel',
		firebase.notifications.Android.Importance.Max
	).setDescription('My apps test channel');

	// Create the channel
	firebase.notifications().android.createChannel(channel);
	PushNotification.configure({
		// (optional) Called when Token is generated (iOS and Android)
		onRegister: async (value: { os: string; token: string }) => {
            console.log('TOKEN:', value.token);
            const storageToken = await AsyncStorage.getItem('deviceToken');
            if (!!storageToken) {
                AsyncStorage.setItem(
					'deviceToken',
					value.token
				);
            }
		},

		// (required) Called when a remote or local notification is opened or received
		onNotification: notification => {
			console.log('NOTIFICATION:', notification);
			// process the notification

			// required on iOS only (see fetchCompletionHandler docs: https://github.com/react-native-community/react-native-push-notification-ios)
			notification.finish(PushNotificationIOS.FetchResult.NoData);
		},

		// ANDROID ONLY: GCM or FCM Sender ID (product_number) (optional - not required for local notifications, but is need to receive remote push notifications)
		senderID: '600203526110',

		// IOS ONLY (optional): default: all - Permissions to register.
		permissions: {
			alert: true,
			badge: true,
			sound: true,
		},

		// Should the initial notification be popped automatically
		// default: true
		popInitialNotification: true,

		/**
		 * (optional) default: true
		 * - Specified if permissions (ios) and token (android and ios) will requested or not,
		 * - if not, you must call PushNotificationsHandler.requestPermissions() later
		 */
		requestPermissions: true,
    });
    firebaseListenerNotification()
}


function firebaseListenerNotification() {
    const listenerNotification = (
		notification: RNFirebase.notifications.Notification
	) => {
        firebase.notifications().displayNotification(notification);
    };
    
    const listenerNotiDisplay = (
		notification: RNFirebase.notifications.Notification
    ) => {
        console.log(notification)
		// firebase.notifications().displayNotification(notification);
	};

    firebase.notifications().onNotification(listenerNotification);
    firebase.notifications().onNotificationDisplayed(listenerNotiDisplay)
}

export class LocalNotification {
	static registerNotification(item: {
		id: string;
		date: number;
		isRepeat: boolean;
		title: string;
	}) {
		let notificationOptions: PushNotificationScheduleObject = {
			/* Android Only Properties */
			id: item.id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
			autoCancel: true, // (optional) default: true
			// largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
			// smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
			// bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
			// /* iOS only properties */
			// alertAction: // (optional) default: view
			// category: // (optional) default: null
			userInfo: {
				id: item.id,
			}, // (optional) default: null (object containing additional notification data)

			/* iOS and Android properties */
			title: "Time's up", // (optional)
			message: `${item.title} alert.`, // (required)
			playSound: false, // (optional) default: true
			soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
			number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
			repeatType: item ? 'day' : undefined, // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
			// actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more}
            date: new Date(item.date),
            alertAction: [],
		};

		PushNotification.localNotificationSchedule(notificationOptions);
	}

	static cancelNotification(id: string) {
        PushNotification.cancelLocalNotifications({ id });
        firebase.notifications().cancelNotification(id);
	}

	clearNotification() {
		PushNotification.clearAllNotifications();
	}

	static firebaseNotification(item: {
		id: string;
		date: number;
        repeat: RepeatType | undefined;
		title: string;
		sound: string;
	}) {
        const notification = new firebase.notifications.Notification()
			.setNotificationId(item.id)
			.setTitle('Tasky Alert')
			.setBody(`${item.title} time's up`)
			.setSound(item.sound)
			.android.setChannelId('reminder')
			.android.setPriority(
				firebase.notifications.Android.Priority.High
			)
			.android.setAutoCancel(true);
        console.log(item.date)
		firebase.notifications().scheduleNotification(notification, {
			fireDate: item.date,
			repeatInterval: item.repeat as any,
		});
	}
}
